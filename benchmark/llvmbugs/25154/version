The following code is miscompiled by the current clang trunk (and 3.7.x) on x86_64-linux-gnu at -O2 and -O3 in both 32-bit and 64-bit modes.

This is a regression from 3.6.x.


$ clang-trunk -v
clang version 3.8.0 (trunk 250080)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /usr/local/tools/bin
Found candidate GCC installation: /usr/lib/gcc/i686-linux-gnu/4.9
Found candidate GCC installation: /usr/lib/gcc/i686-linux-gnu/4.9.2
Found candidate GCC installation: /usr/lib/gcc/i686-linux-gnu/5.1.0
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.4
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.4.7
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.6
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.6.4
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.7
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.7.3
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.8
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.8.4
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.9
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.9.2
Found candidate GCC installation: /usr/lib/gcc/x86_64-linux-gnu/5.1.0
Selected GCC installation: /usr/lib/gcc/x86_64-linux-gnu/4.9
Candidate multilib: .;@m64
Candidate multilib: 32;@m32
Candidate multilib: x32;@mx32
Selected multilib: .;@m64
$
$ clang-trunk -Os small.c; ./a.out
$ clang-3.6 -O2 small.c; ./a.out
$
$ clang-trunk -O2 small.c
$ ./a.out
Aborted (core dumped)
$
$ clang-3.7.0 -O2 small.c
$ ./a.out
Aborted (core dumped)
$


----------------------------------------


#include <assert.h>

struct
{ 
  int f0;
  short f1;
  short f2;
  short f3;
} b, e;

int a, **c, f, *m, d, i, j, l, n;
short ****g;

void
fn1 ()
{ 
  int o;
  if (f)
    { 
      for (; e.f0; e.f0++)
        for (; d; d = 0)
          *c = &o;
      assert (a);
      *m &= i | ((j == 0) == l) | n;
      for (; b.f1 >= 0; b.f1++)
        ;
    }
  for (b.f3 = 0; b.f3 < 2; b.f3++)
    { 
      short *****h = 0;
      for (b.f2 = 0; b.f2; b.f2--)
        h = &g;
      assert (!h);
    }
}

int
main ()
{ 
  fn1 ();

  if (b.f3 != 2)
    __builtin_abort ();

  return 0;
}